############################################
#  Ventilation increase on HUMIDITY        #
#  (level or derivative, multi-sensor)     #
#  Version: 1.1                            #
#  Date: 2025-10-13                        #
#  Author: Mikko Jylhä                     #
############################################
############################################

############################################
#        HUMIDITY SENSOR LISTS (EDIT)      #
############################################
# Define all your humidity sensors here; the automation below will use them.
# You can add/remove sensors freely.

group:
  humidity_sensors:
    name: "Humidity Sensors"
    entities:
      - sensor.measure_th_bathroom1_humidity
      - sensor.measure_th_bathroom2_humidity

  humidity_derivative_sensors:
    name: "Humidity Derivative Sensors"
    entities:
      - sensor.deriv_bathroom1_humidity
      - sensor.deriv_bathroom2_humidity

############################################
#                HELPERS                   #
############################################

input_number:
  threshold_derivative_high:
    name: "Derivative Threshold (trigger, %RH/s)"
    min: 0
    max: 1.0
    step: 0.01
    mode: box
    icon: mdi:chart-bell-curve-cumulative
    initial: 0.1

  threshold_humidity_percent:
    name: "Humidity Threshold (%RH)"
    unit_of_measurement: "%"
    min: 30
    max: 100
    step: 0.5
    mode: box
    icon: mdi:water-percent
    initial: 65

  duration_increase_seconds:
    name: "Duration of Ventilation Increase (seconds)"
    min: 0
    max: 7200
    step: 5
    mode: box
    icon: mdi:timer
    initial: 1800

  steps_to_increase:
    name: "Steps to Increase Ventilation"
    min: 0
    max: 4
    step: 1
    mode: slider
    icon: mdi:counter
    initial: 2

  delay_reverse_seconds:
    name: "Delay Before Reverting Ventilation (seconds)"
    min: 0
    max: 7200
    step: 5
    mode: box
    icon: mdi:timer-sand
    initial: 900

  threshold_humidity_drop:
    name: "Humidity Drop Threshold (percent)"
    unit_of_measurement: "%"
    min: 0
    max: 100
    step: 0.5
    mode: box
    icon: mdi:water-percent
    initial: 60

  timeout_monitor_seconds:
    name: "Monitor Timeout (seconds)"
    min: 0
    max: 86400
    step: 10
    mode: box
    icon: mdi:timer-off-outline
    initial: 7200

input_select:
  method_ventilation_increase:
    name: "Ventilation Increase Method"
    options:
      - single_service
      - pulse_then_wait_then_reverse
      - pulse_until_below
    icon: mdi:script-text-outline

  method_trigger_mode:
    name: "Trigger Mode"
    options:
      - derivative
      - humidity
      - derivative_and_humidity
    icon: mdi:ray-start-arrow

############################################
#                AUTOMATION                #
############################################

automation:
  - id: humidity_ventilation_increase
    alias: "Ventilation: Increase on Humidity Derivative or Level"
    mode: restart
    description: >
      Triggers when humidity level/derivative exceeds threshold on ANY sensor in groups:
      group.humidity_sensors (levels) and group.humidity_derivative_sensors (derivatives).
      Methods: single_service, pulse_then_wait_then_reverse, pulse_until_below.

    trigger:
      - platform: template
        value_template: >-
          {% set mode = states('input_select.method_trigger_mode') %}
          {% set thr_h = states('input_number.threshold_humidity_percent')|float(0) %}
          {% set thr_d = states('input_number.threshold_derivative_high')|float(0) %}

          {# Expand groups into entity objects (may be empty) #}
          {% set levels = expand('group.humidity_sensors') or [] %}
          {% set derivs = expand('group.humidity_derivative_sensors') or [] %}

          {# Build maps: entity_id -> numeric value for quick lookups #}
          {% set level_map = dict( (e.entity_id, e.state|float(0)) for e in levels ) %}
          {% set deriv_map = dict( (d.entity_id, d.state|float(0)) for d in derivs ) %}

          {# Evaluate chosen mode #}
          {% set ns = namespace(hit=false) %}

          {% if mode == 'humidity' %}
            {% for (id, val) in level_map.items() %}
              {% if val >= thr_h %}{% set ns.hit = true %}{% endif %}
            {% endfor %}

          {% elif mode == 'derivative' %}
            {% for (id, dval) in deriv_map.items() %}
              {% if dval > thr_d %}{% set ns.hit = true %}{% endif %}
            {% endfor %}

          {% elif mode == 'derivative_and_humidity' %}
            {# Pair by name heuristic:
               If a level id is 'sensor.measure_th_<ROOM>_humidity',
               we expect derivative 'sensor.deriv_<ROOM>_humidity'.
               If not matching, skip pairing for that id. #}
            {% for (lvl_id, val) in level_map.items() %}
              {% if lvl_id.startswith('sensor.measure_th_') %}
                {% set rest = lvl_id.split('sensor.measure_th_', 1)[1] %}
                {% set cand = 'sensor.deriv_' ~ rest %}
              {% else %}
                {# Fallback: try generic 'sensor.deriv_' + part after 'sensor.' #}
                {% set rest = lvl_id.split('sensor.', 1)[1] if '.' in lvl_id else lvl_id %}
                {% set cand = 'sensor.deriv_' ~ rest %}
              {% endif %}
              {% set dval = deriv_map.get(cand, none) %}
              {% if (dval is not none) and (val >= thr_h) and (dval > thr_d) %}
                {% set ns.hit = true %}
              {% endif %}
            {% endfor %}
          {% endif %}

          {{ ns.hit }}
        for: "00:00:30"

    variables:
      method_v: "{{ states('input_select.method_ventilation_increase') }}"
      steps_increase: "{{ states('input_number.steps_to_increase')|int(0) }}"
      delay_reverse: "{{ states('input_number.delay_reverse_seconds')|int(0) }}"
      threshold_drop: "{{ states('input_number.threshold_humidity_drop')|float(0) }}"
      timeout_monitor: "{{ states('input_number.timeout_monitor_seconds')|int(0) }}"

      # Switch entities from secrets.yaml
      boost_switch_b: !secret boost_switch_b
      plus_switch_b: !secret plus_switch_b
      minus_switch_b: !secret minus_switch_b

    action:
      - choose:

          # ---- METHOD 1: Boost (single_service) ----
          - conditions:
              - condition: template
                value_template: "{{ method_v == 'single_service' }}"
            sequence:
              - service: switch.turn_on
                target:
                  entity_id: "{{ boost_switch_b }}"
              - service: system_log.write
                data:
                  level: info
                  message: "Humidity: single_service → Boost pressed once (hardware handles revert)."

          # ---- METHOD 2: pulse_then_wait_then_reverse ----
          - conditions:
              - condition: template
                value_template: "{{ method_v == 'pulse_then_wait_then_reverse' }}"
            sequence:
              - service: system_log.write
                data:
                  level: info
                  message: "Humidity: pulse_then_wait_then_reverse → up {{ steps_increase }}, wait {{ delay_reverse }}s, then down."
              - repeat:
                  count: "{{ steps_increase }}"
                  sequence:
                    - service: switch.turn_on
                      target:
                        entity_id: "{{ plus_switch_b }}"
                    - delay: "00:00:01"
              - delay:
                  seconds: "{{ delay_reverse }}"
              - repeat:
                  count: "{{ steps_increase }}"
                  sequence:
                    - service: switch.turn_on
                      target:
                        entity_id: "{{ minus_switch_b }}"
                    - delay: "00:00:01"
              - service: system_log.write
                data:
                  level: info
                  message: "Humidity: reverse sequence complete."

          # ---- METHOD 3: pulse_until_below ----
          - conditions:
              - condition: template
                value_template: "{{ method_v == 'pulse_until_below' }}"
            sequence:
              - service: system_log.write
                data:
                  level: info
                  message: "Humidity: pulse_until_below → up {{ steps_increase }}, then monitor until any humidity < {{ threshold_drop }}."
              - repeat:
                  count: "{{ steps_increase }}"
                  sequence:
                    - service: switch.turn_on
                      target:
                        entity_id: "{{ plus_switch_b }}"
                    - delay: "00:00:01"
              - wait_for_trigger:
                  - platform: template
                    value_template: >-
                      {% set levels = expand('group.humidity_sensors') or [] %}
                      {% set ns = namespace(done=false) %}
                      {% for e in levels %}
                        {% if e.state|float(0) < threshold_drop %}
                          {% set ns.done = true %}
                        {% endif %}
                      {% endfor %}
                      {{ ns.done }}
                timeout: >-
                  {% if timeout_monitor|int(0) > 0 %}{{ timeout_monitor|int(0) }}{% else %}0{% endif %}
                continue_on_timeout: true
              - service: system_log.write
                data:
                  level: info
                  message: "Humidity: condition cleared or timeout → step down {{ steps_increase }}."
              - repeat:
                  count: "{{ steps_increase }}"
                  sequence:
                    - service: switch.turn_on
                      target:
                        entity_id: "{{ minus_switch_b }}"
                    - delay: "00:00:01"
              - service: system_log.write
                data:
                  level: info
                  message: "Humidity: pulse_until_below sequence complete."

        default: []
